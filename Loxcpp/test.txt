fun filter(list, f)
{
    var fil = [];
    for elem in list
        if (f(elem))
            push(fil, elem);

    return fil;
}

fun map(list, f)
{
    var fil = [];
    for elem in list
        push(fil, f(elem));

    return fil;
}

fun reduce(list, f, init)
{
    var accum = init;
    for elem in list
        accum = f(elem, accum);

    return accum;
}

fun square(num) { return num * num; }
fun isOdd(num) { return num % 2 != 0; }
fun isEven(num) { return num % 2 == 0; }
var nums = 1..6;

var oddNums = filter(nums, isOdd);
var evenNums = filter(nums, isEven);

print nums;
print oddNums;
print evenNums;

print map(filter(nums, isEven), square);

print reduce(nums, fun(n, acc){ return acc + n; }, 0);


/*for i in 100..103
{
    print "START" + i;
    match (i)
    {
        101: print "Number 101";
        n if n == 102: print "Number 102";
        _: print "Any";
    }
    print "END" + i;
}

var a = "Hello";*/

/*var globalOne;
var globalTwo;

fun main() {
  //for (var a = 1; a <= 2; a = a + 1) // <- this mutates the a variable, so the program prints 3, 3
  {
  for a in 1..2 // <- this creates a local a variable, so the program prints 1, 2
  {
    fun closure() {
      print a;
    }

    if (globalOne == nil) {
      globalOne = closure;
    } else {
      globalTwo = closure;
    }
  }
}

main();
globalOne();
globalTwo();
*/

/*
var globalOne;
var globalTwo;

fun main() {
  for a in 1..2
  {
    match a {
        n: {
            print n;
            fun closure()
            {
              print a;
            }

            if (globalOne == nil) {
              globalOne = closure;
            } else {
              globalTwo = closure;
            }
        }
    }
  }
}

main();
globalOne();
globalTwo();
*/

/*

fun fib(n)
{
    if (n < 2) return n;
    else return fib(n-1) + fib(n-2);
}

{

var total = 0;
const amount = 10;
const depth = 35;
for i in 1..amount
{
    print "Start test " + i;
    const start = clock();
    print fib(depth);
    print clock() - start;
    total = total + (clock() - start);
    print "Done test: " + i;
}

print "**************";
print "Tests finalized";
print "Average run: " + (total / amount);
}*/
/*

for i in 9..5
    print i

is sintatic sugar for:

{
    var __iter = 0;
    var __range = 9..5;
    var i = rangeVal(__range,__iter);

    while (inRangeBounds(__range,__iter) == true)
    {
        print i;

        __iter = __iter + 1;
        i = rangeVal(__range,__iter);
    }
}

*/

// Fizzbuzz implementation
/*for i in 1..20
    match i {
        n if n % 15 == 0 => print "FizzBuzz";
        n if n % 5 == 0 => print "Buzz";
        n if n % 3 == 0 => print "Fizz";
        n: print n;
    }
*/

/*

var a = (n) => { return n*n; };
var a = (n);

keywords to parse:
match, case

grammar for basic pattern:

match ->         "match" "(" expression ")" "{" case* "}"
case  ->         "case" pattern ":" statement; ";"
pattern ->       valuePattern
                 | tuplePattern
valuePattern ->  expression;
tuplePattern ->  pattern ("," pattern)*

How pattern matching could work:

match(value)
{
    case "hello": print "Greeting";
    case "no" | "yes": print "Reply";
    case n: print "I don't know";
}

match(value)
{
    case 1..10: print "Value from 1 to 10";
    case 20: print "That's a 20";
    case n: "Rest of numbers";
}

// Value patterns:
1
2
"hello"
4+5
true

// tuples
1, 2, 5
5, "hello", false

5

// ranges
1..10
5.. // 5 to infinity
..6 // -infinity to 6

// Destructuring objects
var person = { name: "Daniel", surname: "Armesto"}
match(a)
{
    case { name: "Daniel", surname: "Armesto" }: print "It's a Daniel Armesto";
    case { name: "Daniel", surname: s }: print "It's a Daniel with surname: " + s;
}

// Arrays/Vectors/Lists once we have them

var arr = [1,2,3];
match(arr)
{
    case [1,2,3]: print "array 1, 2, 3";
    case [1,2,..]: print "array that starts with 1, 2";
    case [..,2,3]: print "array that ends with 2, 3";
    case [..,2,..]: print "array that has a 2 in the middle";
    case [1, a]: print "array that starts with 1 and ends with: " + a;
    case [1, tail..]: print "array that starts with 1 and has a tail: " + tail;
}

// Variable binding
// Bind the value to a temporary variable
// Also, check for conditions:
match(value)
{
    case v if v % 15 == 0: print v + ": Fizzbuzz";
    case v if v % 5 == 0:  print v + ": Buzz";
    case v if v % 3 == 0:  print v + ": Fizz";
    case v: print v;
}

It would also be cool to do:

var value = match(whatever)
{
    case: "hi": 2;
    case: "no": 5;
    default: 9;
};


// Ranges:

1.. // 1 to inf
1..10 // 1 to 10
1..n // 1 to variable n
10..1 // 10 to 1, decreasing

// That way we can do for in
// Maybe a way of getting rid of the old for loop?
for i in 1..10
{
}

// We could also do

for char in "hello"
    print char

for i in [1,2,3]
    print i;

// Lazy/inf ranges might be a bit too much?
for i in (1..)


*/