// Fizzbuzz implementation

for (var i=1; i<20; i=i+1)
{
    match(i)
    {
        case n if n % 15 == 0: print "FizzBuzz";
        case n if n % 5 == 0: print "Buzz";
        case n if n % 3 == 0: print "Fizz";
        case n: print n;
    }
}


/*

keywords to parse:
match, case

grammar for basic pattern:

match ->         "match" "(" expression ")" "{" case* "}"
case  ->         "case" pattern ":" statement; ";"
pattern ->       valuePattern
                 | tuplePattern
valuePattern ->  expression;
tuplePattern ->  pattern ("," pattern)*

How pattern matching could work:

match(value)
{
    case "hello": print "Greeting";
    case "no", "yes": print "Reply";
    case n: print "I don't know";
}

match(value)
{
    case 1..10: print "Value from 1 to 10";
    case 20: print "That's a 20";
    case n: "Rest of numbers";
}

// Value patterns:
1
2
"hello"
4+5
true

// tuples
1, 2, 5
5, "hello", false

// ranges
1..10
5.. // 5 to infinity
..6 // -infinity to 6

// Destructuring objects
var person = { name: "Daniel", surname: "Armesto"}
match(a)
{
    case { name: "Daniel", surname: "Armesto" }: print "It's a Daniel Armesto";
    case { name: "Daniel", surname: s }: print "It's a Daniel with surname: " + s;
}

// Arrays/Vectors/Lists once we have them

var arr = [1,2,3];
match(arr)
{
    case [1,2,3]: print "array 1, 2, 3";
    case [1,2,..]: print "array that starts with 1, 2";
    case [..,2,3]: print "array that ends with 2, 3";
    case [..,2,..]: print "array that has a 2 in the middle";
    case [1, a]: print "array that starts with 1 and ends with: " + a;
    case [1, tail..]: print "array that starts with 1 and has a tail: " + tail;
}

// Variable binding
// Bind the value to a temporary variable
// Also, check for conditions:
match(value)
{
    case v if v % 15 == 0: print v + ": Fizzbuzz";
    case v if v % 5 == 0:  print v + ": Buzz";
    case v if v % 3 == 0:  print v + ": Fizz";
    case v: print v;
}

It would also be cool to do:

var value = match(whatever)
{
    case: "hi": 2;
    case: "no": 5;
    default: 9;
};


// Ranges:

1.. // 1 to inf
1..10 // 1 to 10
1..n // 1 to variable n
10..1 // 10 to 1, decreasing

// That way we can do for in
// Maybe a way of getting rid of the old for loop?
for i in 1..10
{
}

// We could also do

for char in "hello"
    print char

for i in [1,2,3]
    print i;

// Lazy/inf ranges might be a bit too much?
for i in (1..)


*/